<<<<<<< HEAD
﻿//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
=======
//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------����������� ������������ ������----------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
//////////////////////////////////////////////////////////////////////////////////////////
#include "SingletonSettings.h"

//////////////////////////////////////////////////////////////////////////////////////////
<<<<<<< HEAD
//---------------------------ОПРЕДЕЛЕНИЕ МЕТОДОВ----------------------------------------//
=======
//---------------------------����������� �������----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//--------------------------------------------------------------------------------------//
<<<<<<< HEAD
//---------------------------КЛАСС НАСТРОЙКИ НА ОСНОВЕ ПАТТЕРНА ОДИНОЧКА----------------//
=======
//---------------------------����� ��������� �� ������ �������� ��������----------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
//--------------------------------------------------------------------------------------//
//**************************************************************************************//


//**************************************************************************************//
<<<<<<< HEAD
//------------выдача объекта SingletonSettings------------------------------------------//
SingletonSettings& SingletonSettings::getInstance() {
	static SingletonSettings instance;													// создание объекта SingletonSettings, создается один раз, при вызове метода
	return instance;																	// возврат объекта
}

//**************************************************************************************//
//------------установка промежутка времени обработки------------------------------------//
void SingletonSettings::setPeriodTime(uint32_t begTime, uint32_t endTime) {
	m_beginTime = begTime;																// установка начала обработки
	m_endTime = endTime;																// установка конца обработки
	m_newDuration = endTime - begTime;													// вычисление продолжительности обработанного видео 
	m_idBeginChunkVideo = m_beginTime * m_deltaVideo;									// вычисление чанка видео на начало обработки
	m_idEndChunkVideo = m_endTime * m_deltaVideo;										// вычисление чанка видео на конец обработки
	m_idBegChunkWithIFrame = m_beginTime * m_delta;										// вычисление ключевого чанка на начало обработки
	m_idEndChunkWithIFrame = m_endTime * m_delta;										// вычисление ключевого чанка на конец обработки
	double endIntPart;																	// выделение целой части ID последнего чанка для аудио
	double startIntPart;																// выделение целой части ID первого чанка для аудио

	double fractStartPos = modf(((begTime * static_cast<float>(m_timeScaleAudio)) / m_deltaAudio) / 4.0f, &startIntPart);	// выделение дробной части ID начального чанка для аудио
	double fractEndPos = modf(((endTime * static_cast<float>(m_timeScaleAudio)) / m_deltaAudio) / 4.0f, &endIntPart);		// выделение дробной части ID последнего чанка для аудио

	m_idBeginChunkAudio = static_cast<uint32_t>(startIntPart) + 2;						// вычисление чанка аудио на начало обработки
	m_idEndChunkAudio = static_cast<uint32_t>(endIntPart) + 2;							// вычисление чанка аудио на конец обработки
	m_offsetStartAudioPos = getOffsetAudioChunk(fractStartPos);							// вычисление смещение ID начального чанка аудио
	m_offsetEndtAudioPos = getOffsetAudioChunk(fractEndPos);							// вычисление смещение ID конечного чанка аудио
}

//**************************************************************************************//
//------------выдача времени начала обработки-------------------------------------------//
=======
//------------������ ������� SingletonSettings------------------------------------------//
SingletonSettings& SingletonSettings::getInstance() {
	static SingletonSettings instance;													// �������� ������� SingletonSettings, ��������� ���� ���, ��� ������ ������
	return instance;																	// ������� �������
}

//**************************************************************************************//
//------------��������� ���������� ������� ���������------------------------------------//
void SingletonSettings::setPeriodTime(uint32_t begTime, uint32_t endTime) {
	m_beginTime = begTime;																// ��������� ������ ���������
	m_endTime = endTime;																// ��������� ����� ���������
	m_newDuration = endTime - begTime;													// ���������� ����������������� ������������� ����� 
	m_idBeginChunkVideo = m_beginTime * m_deltaVideo;									// ���������� ����� ����� �� ������ ���������
	m_idEndChunkVideo = m_endTime * m_deltaVideo;										// ���������� ����� ����� �� ����� ���������
	m_idBegChunkWithIFrame = m_beginTime * m_delta;										// ���������� ��������� ����� �� ������ ���������
	m_idEndChunkWithIFrame = m_endTime * m_delta;										// ���������� ��������� ����� �� ����� ���������
	double endIntPart;																	// ��������� ����� ����� ID ���������� ����� ��� �����
	double startIntPart;																// ��������� ����� ����� ID ������� ����� ��� �����

	double fractStartPos = modf(((begTime * static_cast<float>(m_timeScaleAudio)) / m_deltaAudio) / 4.0f, &startIntPart);	// ��������� ������� ����� ID ���������� ����� ��� �����
	double fractEndPos = modf(((endTime * static_cast<float>(m_timeScaleAudio)) / m_deltaAudio) / 4.0f, &endIntPart);		// ��������� ������� ����� ID ���������� ����� ��� �����

	m_idBeginChunkAudio = static_cast<uint32_t>(startIntPart) + 2;						// ���������� ����� ����� �� ������ ���������
	m_idEndChunkAudio = static_cast<uint32_t>(endIntPart) + 2;							// ���������� ����� ����� �� ����� ���������
	m_offsetStartAudioPos = getOffsetAudioChunk(fractStartPos);							// ���������� �������� ID ���������� ����� �����
	m_offsetEndtAudioPos = getOffsetAudioChunk(fractEndPos);							// ���������� �������� ID ��������� ����� �����
}

//**************************************************************************************//
//------------������ ������� ������ ���������-------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getBeginTime() {
	return m_beginTime;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача времени окончания обработки----------------------------------------//
=======
//------------������ ������� ��������� ���������----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getEndTime() {
	return m_endTime;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача продолжительности обработанного видео------------------------------//
=======
//------------������ ����������������� ������������� �����------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getNewDuration() const {
	return m_newDuration;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка коэффициента масштабирования аудио------------------------------//
=======
//------------��������� ������������ ��������������� �����------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setTimeScaleAudio(uint32_t timeScale) {
	m_timeScaleAudio = timeScale;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка коэффициента масштабирования видео------------------------------//
=======
//------------��������� ������������ ��������������� �����------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setTimeScaleVideo(uint32_t timeScale) {
	m_timeScaleVideo = timeScale;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача коэффициента масштабирования аудио---------------------------------//
=======
//------------������ ������������ ��������������� �����---------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getTimeScaleAudio() {
	return m_timeScaleAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача коэффициента масштабирования видео---------------------------------//
=======
//------------������ ������������ ��������������� �����---------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getTimeScaleVideo() {
	return m_timeScaleVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка дельты времени аудио--------------------------------------------//
=======
//------------��������� ������ ������� �����--------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setDeltaAudio(uint32_t delta) {
	m_deltaAudio = delta;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка дельты времени видео--------------------------------------------//
=======
//------------��������� ������ ������� �����--------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setDeltaVideo(uint32_t delta) {
	m_deltaVideo = delta;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка дельты времени для ключевых кадров видео------------------------//
=======
//------------��������� ������ ������� ��� �������� ������ �����------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setDelta(uint32_t delta) {
	m_delta = delta;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача дельты времени аудио-----------------------------------------------//
=======
//------------������ ������ ������� �����-----------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getDeltaAudio() const {
	return m_deltaAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача дельты времени видео-----------------------------------------------//
=======
//------------������ ������ ������� �����-----------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getDeltaVideo() const {
	return m_deltaVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача дельты времени для ключевых кадров видео---------------------------//
=======
//------------������ ������ ������� ��� �������� ������ �����---------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getDelta() const {
	return m_delta;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка начального сдвига аудио-----------------------------------------//
=======
//------------��������� ���������� ������ �����-----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setBeginOffsetAudio(uint32_t offset) {
	m_beginOffsetAudio = offset;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка конечного сдвига аудио------------------------------------------//
=======
//------------��������� ��������� ������ �����------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setEndOffsetAudio(uint32_t offset) {
	m_endOffsetAudio = offset;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка начального сдвига видео-----------------------------------------//
=======
//------------��������� ���������� ������ �����-----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setBeginOffsetVideo(uint32_t offset) {
	m_beginOffsetVideo = offset;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка конечного сдвига видео------------------------------------------//
=======
//------------��������� ��������� ������ �����------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setEndOffsetVideo(uint32_t offset) {
	m_endOffsetVideo = offset;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача начального и конечного сдвига аудио--------------------------------//
=======
//------------������ ���������� � ��������� ������ �����--------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
std::pair<uint32_t, uint32_t> SingletonSettings::getOffsetAudio() {
	return std::pair<uint32_t, uint32_t>(m_beginOffsetAudio, m_endOffsetAudio);
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача начального и конечного сдвига видео--------------------------------//
=======
//------------������ ���������� � ��������� ������ �����--------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
std::pair<uint32_t, uint32_t> SingletonSettings::getOffsetVideo() {
	return std::pair<uint32_t, uint32_t>(m_beginOffsetVideo, m_endOffsetVideo);
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача начального ID и сдвига аудио---------------------------------------//
=======
//------------������ ���������� ID � ������ �����---------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
std::pair<uint32_t, uint32_t> SingletonSettings::getStartIdChunkAudio() {
	return std::pair<uint32_t, uint32_t>(m_idBeginChunkAudio, m_offsetStartAudioPos);
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача конечного ID и сдвига аудио----------------------------------------//
=======
//------------������ ��������� ID � ������ �����----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
std::pair<uint32_t, uint32_t> SingletonSettings::getEndIdChunkAudio() {
	return std::pair<uint32_t, uint32_t>(m_idEndChunkAudio, m_offsetEndtAudioPos);
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка массива сдвигов чанков аудио------------------------------------//
=======
//------------��������� ������� ������� ������ �����------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setArrayChunkOffsetAudio(std::vector<uint32_t> &arrayChunkOffset) {
	pm_chunkOffsetAudio = &arrayChunkOffset;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка массива сдвигов чанков видео------------------------------------//
=======
//------------��������� ������� ������� ������ �����------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setArrayChunkOffsetVideo(std::vector<uint32_t> &arrayChunkOffset) {
	pm_chunkOffsetVideo = &arrayChunkOffset;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача массива сдвигов чанков аудио---------------------------------------//
=======
//------------������ ������� ������� ������ �����---------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
std::vector<uint32_t>& SingletonSettings::getArrayChunkOffsetAudio() {
	return *pm_chunkOffsetAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача массива сдвигов чанков видео---------------------------------------//
=======
//------------������ ������� ������� ������ �����---------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
std::vector<uint32_t>& SingletonSettings::getArrayChunkOffsetVideo() {
	return *pm_chunkOffsetVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка начального ID чанка аудио---------------------------------------//
=======
//------------��������� ���������� ID ����� �����---------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setIDBeginChunkAudio(uint32_t idChunk) {
	m_idBeginChunkAudio = idChunk;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка конечного ID чанка аудио----------------------------------------//
=======
//------------��������� ��������� ID ����� �����----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setIDEndChunkAudio(uint32_t idChunk) {
	m_idEndChunkAudio = idChunk;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка начального ID чанка видео---------------------------------------//
=======
//------------��������� ���������� ID ����� �����---------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setIDBeginChunkVideo(uint32_t idChunk) {
	m_idBeginChunkVideo = idChunk;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка конечного ID чанка видео----------------------------------------//
=======
//------------��������� ��������� ID ����� �����----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setIDEndChunkVideo(uint32_t idChunk) {
	m_idEndChunkVideo = idChunk;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача начального ID чанка аудио------------------------------------------//
=======
//------------������ ���������� ID ����� �����------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getIDBeginChunkAudio() {
	return m_idBeginChunkAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача конечного ID чанка аудио-------------------------------------------//
=======
//------------������ ��������� ID ����� �����-------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getIDEndChunkAudio() {
	return m_idEndChunkAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача начального ID чанка видео------------------------------------------//
=======
//------------������ ���������� ID ����� �����------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getIDBeginChunkVideo() {
	return m_idBeginChunkVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача конечного ID чанка видео-------------------------------------------//
=======
//------------������ ��������� ID ����� �����-------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getIDEndChunkVideo() {
	return m_idEndChunkVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------вычисление смещения чанка аудио-------------------------------------------//
=======
//------------���������� �������� ����� �����-------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getOffsetAudioChunk(double fractPos)
{
	if ((fractPos >= 0) && (fractPos < 0.25f)) {
		return 0;
	}
	else if ((fractPos >= 0.25f) && (fractPos < 0.5f)) {
		return 1;
	}
	else if ((fractPos >= 0.5f) && (fractPos < 0.75f)) {
		return 2;
	}
	else {
		return 3;
	}
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача размера вырезаемого видео------------------------------------------//
=======
//------------������ ������� ����������� �����------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getSizeCut() const {
	return m_sizeCut;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка размера выходного видео-----------------------------------------//
=======
//------------��������� ������� ��������� �����-----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setSizeCut(const uint32_t &sizeCut) {
	m_sizeCut = sizeCut;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка размера выходного видео-----------------------------------------//
=======
//------------��������� ������� ��������� �����-----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getBeginOffsetFile() const {
	return m_beginOffsetFile;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка начального сдвига отнсительно начала файла для вырезания--------//
=======
//------------��������� ���������� ������ ����������� ������ ����� ��� ���������--------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setBeginOffsetFile(const uint32_t &beginOffsetFile) {
	m_beginOffsetFile = beginOffsetFile;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача размера последнего чанка видео-------------------------------------//
=======
//------------������ ������� ���������� ����� �����-------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getLastChunkVideoSize() const {
	return m_lastChunkVideoSize;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка размера последнего чанка видео----------------------------------//
=======
//------------��������� ������� ���������� ����� �����----------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setLastChunkVideoSize(const uint32_t &lastChunkVideoSize) {
	m_lastChunkVideoSize = lastChunkVideoSize;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача кол-ва чанков видео------------------------------------------------//
=======
//------------������ ���-�� ������ �����------------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getAmountChunkVideo() const {
	return m_amountChunkVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка кол-ва чанков видео---------------------------------------------//
=======
//------------��������� ���-�� ������ �����---------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setAmountChunkVideo(const uint32_t &amountChunkVideo) {
	m_amountChunkVideo = amountChunkVideo;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача кол-ва чанков аудио------------------------------------------------//
=======
//------------������ ���-�� ������ �����------------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getAmountChunkAudio() const {
	return m_amountChunkAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка кол-ва чанков аудио---------------------------------------------//
=======
//------------��������� ���-�� ������ �����---------------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setAmountChunkAudio(const uint32_t &amountChunkAudio) {
	m_amountChunkAudio = amountChunkAudio;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача размера последнего чанка аудио-------------------------------------//
=======
//------------������ ������� ���������� ����� �����-------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getLastChunkAudioSize() const {
	return m_lastChunkAudioSize;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка размера последнего чанка аудио----------------------------------//
=======
//------------��������� ������� ���������� ����� �����----------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setLastChunkAudioSize(const uint32_t &lastChunkAudioSize) {
	m_lastChunkAudioSize = lastChunkAudioSize;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача размера первого чанка аудио----------------------------------------//
=======
//------------������ ������� ������� ����� �����----------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getFirstChunkAudioSize() const {
	return m_firstChunkAudioSize;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка размера первого чанка аудио-------------------------------------//
=======
//------------��������� ������� ������� ����� �����-------------------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
void SingletonSettings::setFirstChunkAudioSize(const uint32_t &firstChunkAudioSize) {
	m_firstChunkAudioSize = firstChunkAudioSize;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------выдача ID последнего чанка с ключевым кадром видео------------------------//
=======
//------------������ ID ���������� ����� � �������� ������ �����------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getIdEndChunkWithIFrame() const {
	return m_idEndChunkWithIFrame;
}

//**************************************************************************************//
<<<<<<< HEAD
//------------установка ID последнего чанка с ключевым кадром---------------------------//
=======
//------------��������� ID ���������� ����� � �������� ������---------------------------//
>>>>>>> 821ee1867430c3d4c6a564d2dec51ba8d2b72c84
uint32_t SingletonSettings::getIdBegChunkWithIFrame() const {
	return m_idBegChunkWithIFrame;
}