//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
//////////////////////////////////////////////////////////////////////////////////////////
#include "mdia.h"
#include "../interfaces/callbackinterface.h"

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ МЕТОДОВ----------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//--------------------------------------------------------------------------------------//
//---------------------------КЛАСС АТОМА MDIA-------------------------------------------//
//--------------------------------------------------------------------------------------//
//**************************************************************************************//
using namespace std;                                                                    //использование пространства имен STD

//**************************************************************************************//
//------------конструктор---------------------------------------------------------------//
MDIA::MDIA():Atom(MDIA_NAME, MDIA_DIG_NAME)
{
    m_mdhd = make_unique<MDHD>();                                                       //создание умного указателя unique_ptr на атом MDHD ???
    m_hdlr = make_unique<HDLR>();                                                       //создание умного указателя unique_ptr на атом HDLR ???

}

//**************************************************************************************//
//------------деконструктор-------------------------------------------------------------//
MDIA::~MDIA()
{

}

//**************************************************************************************//
//------------парсинг структуры атома MDIA----------------------------------------------//
void MDIA::parse(StreamReader &stream, uint32_t &startPos)
{
    printAtomName(LV3);                                                                 //вывод названия атома с определненным выравниванием(lv)
    uint32_t pos = startPos;                                                            //присваивание переменной pos значения текущей начальной позиции в файле startPos
    m_size = stream.readSizeAtom();                                                     //размер чанка атома в памяти(???)
    pos = startPos+OFFSET_TITLE;                                                        //присваивание переменной pos значения (текущая начальная позиция в файле startPos + 8 байт(размер и заголовок атома))
    stream.setPos(pos);                                                                 //установка указателя файла на новую позицию pos
    m_mdhd->parse(stream,pos);                                                          //вызов виртуальной функции парсинга атома mdhd в файле mdhd.срр ???
    m_hdlr->parse(stream,pos);                                                          //вызов виртуальной функции парсинга атома hdlr в файле hdlr.срр ???
    m_minf = make_unique<MINF>(m_hdlr->getTrakType());                                  //создание умного указателя unique_ptr на атом MINF, но с указанием какого именно: soun или vid
    m_minf->setCallback(this);                                                          //создание возврата в minf
    m_mdhd->setTrakType(getTrakType());                                                 //вызов виртуальной функции setTrakType в mdhd.срр (???)
    m_minf->parse(stream,pos);                                                          //вызов виртуальной функции парсинга атома minf в файле minf.срр ???
    startPos += m_size;                                                                 //значение начальной позиции startPos увеличиваем на размер чанка атома m_size
}

//**************************************************************************************//
//------------получение типа трека------------------------------------------------------//
TRAK_TYPE MDIA::getTrakType()
{
    return m_hdlr->getTrakType();
}

//**************************************************************************************//
//------------обработка данных----------------------------------------------------------//
void MDIA::prepareData()
{
    m_mdhd->setNewDuration(m_singletonSettings.getNewDuration());                       //установка новой длительности видео в mdhd
    m_minf->prepareData();                                                              //обработка minf
}

//**************************************************************************************//
//------------запись атома MDIA---------------------------------------------------------//
void MDIA::writeAtom(StreamWriter &stream)
{
    stream.writeLitToBigEndian(m_size);                                                 //запись размера в BigEndian
    stream.writeAtomName(MDIA_NAME);                                                    //запись названия атома MDIA
    m_mdhd->writeAtom(stream);                                                          //запись атома mdhd
    m_hdlr->writeAtom(stream);                                                          //запись атома hdlr
    m_minf->writeAtom(stream);                                                          //запись атома minf
}

//**************************************************************************************//
//------------изменение размера атома MDIA----------------------------------------------//
void MDIA::resizeAtom(uint32_t size, DIRECT_RESIZE direction)
{
    if(direction == DIRECT_RESIZE::INCREASED){                                          //если размер атома увеличился
        this->m_size +=size;                                                            //увеличение размера атома
    }else{                                                                              //если размер атома уменьшился
        this->m_size -=size;                                                            //уменьшение размера атома
    }
    m_callback->resizeAtom(size,direction);                                             //вызов изменения атома выше уровнем
}
