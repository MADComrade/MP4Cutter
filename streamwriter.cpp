//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
//////////////////////////////////////////////////////////////////////////////////////////
#include "streamwriter.h"
#include "endians.h"

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ МЕТОДОВ----------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//--------------------------------------------------------------------------------------//
//---------------------------КЛАСС ПОТОКА ЗАПИСИ----------------------------------------//
//--------------------------------------------------------------------------------------//
//**************************************************************************************//
using namespace std;																	// использование пространства имен STD

//**************************************************************************************//
//------------конструктор---------------------------------------------------------------//
StreamWriter::StreamWriter(std::string fileName):m_filePath(fileName)
{

}

//**************************************************************************************//
//------------деконструктор-------------------------------------------------------------//
StreamWriter::~StreamWriter() 
{
    closeStream();																		// закрыть поток
}

//**************************************************************************************//
//------------открыть поток-------------------------------------------------------------//
bool StreamWriter::openStream()
{
    if(m_filePath.empty())																// проверка пути файла на ввод
        return false;																	// возврат ошибки
    m_file.open(m_filePath, ios_base::out | ios_base::binary);							// открываем файл на вывод в бинарном режиме
    return m_file.is_open();															// возврат кода ошибки открытия файла
}

//**************************************************************************************//
//------------закрыть поток-------------------------------------------------------------//
void StreamWriter::closeStream()
{
    if(m_file.is_open())
        m_file.close();
}

//**************************************************************************************//
//------------записать размер атом------------------------------------------------------//
void StreamWriter::writeAtomSize(uint32_t size)
{
    write(reinterpret_cast< uint8_t * >(&(size)),sizeof(size));
}

//**************************************************************************************//
//------------записать имя атома--------------------------------------------------------//
void StreamWriter::writeAtomName(uint32_t name)
{
    write(reinterpret_cast< uint8_t * >(&(name)),sizeof(name));
}

//**************************************************************************************//
//------------записать имя атома--------------------------------------------------------//
void StreamWriter::writeAtomName(string name)
{
    write(reinterpret_cast< uint8_t * >(const_cast<char*>(name.c_str())),4);
}

//**************************************************************************************//
//------------записать 4 байта----------------------------------------------------------//
void StreamWriter::writeUInt32(uint32_t data)
{
    write(reinterpret_cast< uint8_t * >(&(data)),sizeof(data));
}

//**************************************************************************************//
//------------записать данные в BigEndian-----------------------------------------------//
void StreamWriter::writeLitToBigEndian(uint32_t data)
{
    data = swapEndian(data);															// перевод LittlelEndian в BigEndian
    write(reinterpret_cast< uint8_t * >(&(data)),sizeof(data));
}

//**************************************************************************************//
//------------записать массив данных----------------------------------------------------//
void StreamWriter::write(uint8_t *buf, uint64_t length)
{
    m_file.write(reinterpret_cast< char * >( buf ), static_cast< std::streamsize >( length ));
}
