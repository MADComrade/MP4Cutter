//////////////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////////////
#include "streamreader.h"

//////////////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ МЕТОДОВ------------------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////////////

//**********************************************************************************************//
//----------------------------------------------------------------------------------------------//
//---------------------------КЛАСС ПОТОКА ЧТЕНИЯ------------------------------------------------//
//----------------------------------------------------------------------------------------------//
//**********************************************************************************************//
using namespace std;                                                                            // использование пространства имен STD

//**********************************************************************************************//
//------------конструктор-----------------------------------------------------------------------//
StreamReader::StreamReader(std::string filePath):m_filePath(filePath)
{
}

//**********************************************************************************************//
//------------деконструктор---------------------------------------------------------------------//
StreamReader::~StreamReader()
{
    closeStream();                                                                              // закрыть поток
}

//**********************************************************************************************//
//------------открыть поток---------------------------------------------------------------------//
bool StreamReader::openStream()
{
    if(m_filePath.empty())                                                                      //если путь к файлу mp4 вообще не прописан в коде
        return false;                                                                           // возврат ошибки
    m_file.open(m_filePath, ios_base::in | ios_base::binary);                                   //открывает файл по заданному пути m_filePath, открывает двоичный файл для чтения
    if(m_file.is_open()){                                                                       //если файл открыт
        m_file.seekg(0,ios_base::end);                                                          //перемещение указателя ввода файла на 0 байт от конца
        m_endnpos = m_file.tellg();                                                             //определение текущего указателя ввода файла
        m_file.seekg(0,ios_base::beg);                                                          //перемещение указателя ввода файла на 0 байт от начала
    }
    return m_file.is_open();                                                                    //возвращает 1, если файл был успешно открыт, 0 если файл открыт не был
}

//**********************************************************************************************//
//------------закрыть поток---------------------------------------------------------------------//
void StreamReader::closeStream()
{
    if(m_file.is_open())
        m_file.close();
}

//**********************************************************************************************//
//------------прочитать массив данных-----------------------------------------------------------//
void StreamReader::read(uint8_t *buf, uint64_t length)
{
    m_file.read( reinterpret_cast< char * >( buf ), static_cast< std::streamsize >( length ) ); //чтение length байт из файла m_file по адресу buf
}

//**********************************************************************************************//
//------------прочитать 1 байт------------------------------------------------------------------//
uint8_t StreamReader::readUInt8()
{
    uint8_t n;
    n = 0;
    read( reinterpret_cast< uint8_t * >( &n ), 1 );
    return n;
}

//**********************************************************************************************//
//------------получить имя атома----------------------------------------------------------------//
string StreamReader::getTitleAtom()
{
    streamsize offset = m_file.tellg();                                                         // + 4;  //определение текущего указателя ввода файла
    m_file.seekg( (offset+4), ios_base::beg );                                                  //перемещение указателя ввода файла на (текущ.указатель+4) байт от начала
    string rezult = getDataInAtom();                                                            //получение имени заголовка атома
    m_file.seekg( offset, ios_base::beg );                                                      //перемещение указателя ввода файла на offset байт от начала
    return rezult;                                                                              //возвращение имени атома
}

//**********************************************************************************************//
//------------чтение данных в атоме-------------------------------------------------------------//
string StreamReader::getDataInAtom()
{
    std::ifstream::pos_type cur;
    cur = m_file.tellg();                                                                       //определение текущего указателя ввода файла
    string title = std::string(4, ' ' );                                                        //создается переменная title, которая заполняется 4-мя пробелами (???)
    m_file.seekg( cur, ios_base::beg );                                                         //перемещение указателя ввода файла на cur байт от начала
    read( reinterpret_cast< uint8_t * >( &( title[ 0 ] ) ), 4 );                                //чтение 4 байт из файла m_file по адресу title[ 0 ]
    m_file.seekg( cur, ios_base::beg );                                                         //перемещение указателя ввода файла на cur байт от начала
    return title;                                                                               //возвращение данных атома
}

//**********************************************************************************************//
//------------прочитать 4 байта-----------------------------------------------------------------//
uint32_t StreamReader::readUInt32()
{
    uint32_t n;
    n = 0;
    read( reinterpret_cast< uint8_t * >( &n ), 4 );
    return n;
}

//**********************************************************************************************//
//------------прочитать данные BigEndian--------------------------------------------------------//
uint32_t StreamReader::readBigEndianUInt32()
{
    uint8_t  c[ 4 ];
    uint32_t n;
    uint32_t n1;
    uint32_t n2;
    uint32_t n3;
    uint32_t n4;

    c[ 0 ] = 0;
    c[ 1 ] = 0;
    c[ 2 ] = 0;
    c[ 3 ] = 0;

    read( reinterpret_cast< uint8_t * >( c ), 4 );

    n1 = static_cast< uint32_t >( c[ 0 ] );
    n2 = static_cast< uint32_t >( c[ 1 ] );
    n3 = static_cast< uint32_t >( c[ 2 ] );
    n4 = static_cast< uint32_t >( c[ 3 ] );

    n  = static_cast< uint32_t >( n1 << 24 )
            | static_cast< uint32_t >( n2 << 16 )
            | static_cast< uint32_t >( n3 << 8 )
            | n4;

    return n;
}

//**********************************************************************************************//
//------------прочитать размер атома------------------------------------------------------------//
uint32_t StreamReader::readSizeAtom()
{
    std::ifstream::pos_type cur;

    cur = m_file.tellg();                                                                       //определение текущего указателя ввода файла
    uint32_t chunkSize = readBigEndianUInt32();                                                 //размер чанка в памяти (???)
    m_file.seekg( cur, ios_base::beg );                                                         //перемещение указателя ввода файла на cur байт от начала
    return chunkSize;                                                                           //возвращение размера чанка в памяти
}

//**********************************************************************************************//
//------------прочитать блоки данных------------------------------------------------------------//
void StreamReader::getBlock(uint8_t *buf, uint64_t pos, uint64_t length)
{
    std::ifstream::pos_type cur;

    cur = m_file.tellg();                                                                       //определение текущего указателя ввода файла

    m_file.seekg( static_cast< std::ifstream::off_type >( pos ), ios_base::beg );               //перемещение указателя ввода файла на pos байт от начала
    m_file.read( reinterpret_cast< char * >( buf ), static_cast< std::streamsize >( length ) ); //чтение length байт из файла m_file по адресу buf
    m_file.seekg( cur, ios_base::beg );                                                         //перемещение указателя ввода файла на cur байт от начала
}

//**********************************************************************************************//
//------------определение текущего указателя ввода файла----------------------------------------//
streamsize StreamReader::getPose()
{
    return m_file.tellg();
}

//**********************************************************************************************//
//------------установление указателя ввода файла на pos байт от начала--------------------------//
void StreamReader::setPos(streamsize pos)
{
    m_file.seekg(pos,ios_base::beg);
}

//**********************************************************************************************//
//------------получение размера файла-----------------------------------------------------------//
streamsize StreamReader::getFileSize()
{
    return m_endnpos;
}
